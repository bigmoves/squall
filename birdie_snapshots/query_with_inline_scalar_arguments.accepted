---
version: 1.2.0
title: Query with inline scalar arguments
---
import gleam/dynamic
import gleam/http
import gleam/http/request
import gleam/httpc
import gleam/json
import gleam/list
import gleam/option.{type Option}
import gleam/result
import squall

pub type Character {
  Character(id: String, name: String)
}

pub fn character_decoder() -> dynamic.Decoder(Character) {
  fn(data: dynamic.Dynamic) -> Result(Character, List(dynamic.DecodeError)) {
    use id <- result.try(dynamic.field("id", dynamic.string)(data))
    use name <- result.try(dynamic.field("name", dynamic.string)(data))
    Ok(Character(id: id, name: name))
  }
}

pub type GetCharacterResponse {
  GetCharacterResponse(character: Option(Character))
}

pub fn get_character_response_decoder() -> dynamic.Decoder(GetCharacterResponse) {
  fn(data: dynamic.Dynamic) -> Result(
    GetCharacterResponse,
    List(dynamic.DecodeError),
  ) {
    use character <- result.try(dynamic.field(
      "character",
      dynamic.optional(character_decoder()),
    )(data))
    Ok(GetCharacterResponse(character: character))
  }
}

pub fn get_character(client: squall.Client) -> Result(GetCharacterResponse, String) {
  let query =
    "query GetCharacter { character(id: 1) { id name } }"
  let variables =
    json.object([])
  let body =
    json.object([#("query", json.string(query)), #("variables", variables)])
  use req <- result.try(
    request.to(client.endpoint)
    |> result.map_error(fn(_) { "Invalid endpoint URL" }),
  )
  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.to_string(body))
    |> request.set_header("content-type", "application/json")
  let req =
    list.fold(client.headers, req, fn(r, header) {
      request.set_header(r, header.0, header.1)
    })
  use resp <- result.try(
    httpc.send(req)
    |> result.map_error(fn(_) { "HTTP request failed" }),
  )
  use json_value <- result.try(
    json.decode(from: resp.body, using: dynamic.dynamic)
    |> result.map_error(fn(_) { "Failed to decode JSON response" }),
  )
  use data_field <- result.try(
    dynamic.field("data", dynamic.dynamic)(json_value)
    |> result.map_error(fn(_) { "No data field in response" }),
  )
  get_character_response_decoder()(data_field)
  |> result.map_error(fn(_) { "Failed to decode response data" })
}
