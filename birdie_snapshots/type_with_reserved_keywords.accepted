---
version: 1.2.0
title: Type with reserved keywords
file: ./test/codegen_test.gleam
test_name: generate_with_reserved_keywords_test
---
import gleam/dynamic
import gleam/http
import gleam/http/request
import gleam/httpc
import gleam/json
import gleam/option.{type Option}
import gleam/result

pub type Item {
  Item(
    id: String,
    type_: Option(String),
    case_: Option(String),
    let_: Option(String),
  )
}

pub fn item_decoder() -> dynamic.Decoder(Item) {
  fn(data: dynamic.Dynamic) -> Result(Item, List(dynamic.DecodeError)) {
    use id <- result.try(dynamic.field("id", dynamic.string)(data))
    use type_ <- result.try(dynamic.field(
      "type",
      dynamic.optional(dynamic.string),
    )(data))
    use case_ <- result.try(dynamic.field(
      "case",
      dynamic.optional(dynamic.string),
    )(data))
    use let_ <- result.try(dynamic.field(
      "let",
      dynamic.optional(dynamic.string),
    )(data))
    Ok(Item(id: id, type_: type_, case_: case_, let_: let_))
  }
}

pub type GetItemResponse {
  GetItemResponse(item: Option(Item))
}

pub fn get_item_response_decoder() -> dynamic.Decoder(GetItemResponse) {
  fn(data: dynamic.Dynamic) -> Result(
    GetItemResponse,
    List(dynamic.DecodeError),
  ) {
    use item <- result.try(dynamic.field(
      "item",
      dynamic.optional(item_decoder()),
    )(data))
    Ok(GetItemResponse(item: item))
  }
}

pub fn get_item(endpoint: String) -> Result(GetItemResponse, String) {
  let query =
    "query GetItem { item { id type case let } }"
  let variables =
    json.object([])
  let body =
    json.object([#("query", json.string(query)), #("variables", variables)])
  use req <- result.try(
    request.to(endpoint)
    |> result.map_error(fn(_) { "Invalid endpoint URL" }),
  )
  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.to_string(body))
    |> request.set_header("content-type", "application/json")
  use resp <- result.try(
    httpc.send(req)
    |> result.map_error(fn(_) { "HTTP request failed" }),
  )
  use json_value <- result.try(
    json.decode(from: resp.body, using: dynamic.dynamic)
    |> result.map_error(fn(_) { "Failed to decode JSON response" }),
  )
  use data_field <- result.try(
    dynamic.field("data", dynamic.dynamic)(json_value)
    |> result.map_error(fn(_) { "No data field in response" }),
  )
  get_item_response_decoder()(data_field)
  |> result.map_error(fn(_) { "Failed to decode response data" })
}
