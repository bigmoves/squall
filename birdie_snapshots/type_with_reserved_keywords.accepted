---
version: 1.4.1
title: Type with reserved keywords
---
import gleam/dynamic/decode
import gleam/http
import gleam/http/request
import gleam/httpc
import gleam/json
import gleam/list
import gleam/option.{type Option}
import gleam/result
import squall

pub type Item {
  Item(
    id: String,
    type_: Option(String),
    case_: Option(String),
    let_: Option(String),
  )
}

pub fn item_decoder() -> decode.Decoder(Item) {
  use id <- decode.field("id", decode.string)
  use type_ <- decode.field("type", decode.optional(decode.string))
  use case_ <- decode.field("case", decode.optional(decode.string))
  use let_ <- decode.field("let", decode.optional(decode.string))
  decode.success(Item(id: id, type_: type_, case_: case_, let_: let_))
}

pub type GetItemResponse {
  GetItemResponse(item: Option(Item))
}

pub fn get_item_response_decoder() -> decode.Decoder(GetItemResponse) {
  use item <- decode.field("item", decode.optional(item_decoder()))
  decode.success(GetItemResponse(item: item))
}

pub fn get_item(client: squall.Client) -> Result(GetItemResponse, String) {
  let query =
    "query GetItem { item { id type case let } }"
  let variables =
    json.object([])
  let body =
    json.object([#("query", json.string(query)), #("variables", variables)])
  use req <- result.try(
    request.to(client.endpoint)
    |> result.map_error(fn(_) { "Invalid endpoint URL" }),
  )
  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.to_string(body))
    |> request.set_header("content-type", "application/json")
  let req =
    list.fold(client.headers, req, fn(r, header) {
      request.set_header(r, header.0, header.1)
    })
  use resp <- result.try(
    httpc.send(req)
    |> result.map_error(fn(_) { "HTTP request failed" }),
  )
  use json_value <- result.try(
    json.parse(from: resp.body, using: decode.dynamic)
    |> result.map_error(fn(_) { "Failed to decode JSON response" }),
  )
  let data_and_response_decoder = {
    use data <- decode.field("data", get_item_response_decoder())
    decode.success(data)
  }
  decode.run(json_value, data_and_response_decoder)
  |> result.map_error(fn(_) { "Failed to decode response data" })
}

