---
version: 1.4.1
title: Query with all non-nullable fields (no Option import)
file: ./test/codegen_test.gleam
test_name: generate_query_with_all_non_nullable_fields_test
---
import gleam/dynamic/decode
import gleam/http
import gleam/http/request
import gleam/httpc
import gleam/json
import gleam/list
import gleam/result
import squall

pub type Product {
  Product(id: String, name: String, price: Float)
}

pub fn product_decoder() -> decode.Decoder(Product) {
  use id <- decode.field("id", decode.string)
  use name <- decode.field("name", decode.string)
  use price <- decode.field("price", decode.float)
  decode.success(Product(id: id, name: name, price: price))
}

pub type GetProductResponse {
  GetProductResponse(product: Product)
}

pub fn get_product_response_decoder() -> decode.Decoder(GetProductResponse) {
  use product <- decode.field("product", product_decoder())
  decode.success(GetProductResponse(product: product))
}

pub fn get_product(client: squall.Client) -> Result(GetProductResponse, String) {
  let query =
    "query GetProduct { product { id name price } }"
  let variables =
    json.object([])
  let body =
    json.object([#("query", json.string(query)), #("variables", variables)])
  use req <- result.try(
    request.to(client.endpoint)
    |> result.map_error(fn(_) { "Invalid endpoint URL" }),
  )
  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.to_string(body))
    |> request.set_header("content-type", "application/json")
  let req =
    list.fold(client.headers, req, fn(r, header) {
      request.set_header(r, header.0, header.1)
    })
  use resp <- result.try(
    httpc.send(req)
    |> result.map_error(fn(_) { "HTTP request failed" }),
  )
  use json_value <- result.try(
    json.parse(from: resp.body, using: decode.dynamic)
    |> result.map_error(fn(_) { "Failed to decode JSON response" }),
  )
  let data_and_response_decoder = {
    use data <- decode.field("data", get_product_response_decoder())
    decode.success(data)
  }
  decode.run(json_value, data_and_response_decoder)
  |> result.map_error(fn(_) { "Failed to decode response data" })
}

