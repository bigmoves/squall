---
version: 1.4.1
title: Query with all non-nullable fields (no Option import)
file: ./test/codegen_test.gleam
test_name: generate_query_with_all_non_nullable_fields_test
---
import gleam/dynamic/decode
import gleam/json
import squall

pub type Product {
  Product(id: String, name: String, price: Float)
}

pub fn product_decoder() -> decode.Decoder(Product) {
  use id <- decode.field("id", decode.string)
  use name <- decode.field("name", decode.string)
  use price <- decode.field("price", decode.float)
  decode.success(Product(id: id, name: name, price: price))
}

pub fn product_to_json(input: Product) -> json.Json {
  json.object(
    [
      #("id", json.string(input.id)),
      #("name", json.string(input.name)),
      #("price", json.float(input.price)),
    ],
  )
}

pub type GetProductResponse {
  GetProductResponse(product: Product)
}

pub fn get_product_response_decoder() -> decode.Decoder(GetProductResponse) {
  use product <- decode.field("product", product_decoder())
  decode.success(GetProductResponse(product: product))
}

pub fn get_product_response_to_json(input: GetProductResponse) -> json.Json {
  json.object([#("product", product_to_json(input.product))])
}

pub fn get_product(client: squall.Client) {
  squall.execute_query(
    client,
    "query GetProduct { product { id name price } }",
    json.object([]),
    get_product_response_decoder(),
  )
}

