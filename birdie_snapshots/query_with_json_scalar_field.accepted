---
version: 1.4.1
title: Query with JSON scalar field
file: ./test/codegen_test.gleam
test_name: generate_query_with_json_scalar_test
---
import gleam/dynamic/decode
import gleam/json
import squall
import gleam/option.{type Option}
import gleam/dynamic.{type Dynamic}

pub type Profile {
  Profile(id: String, display_name: Option(String), metadata: Option(Dynamic))
}

pub fn profile_decoder() -> decode.Decoder(Profile) {
  use id <- decode.field("id", decode.string)
  use display_name <- decode.field("displayName", decode.optional(decode.string))
  use metadata <- decode.field("metadata", decode.optional(decode.dynamic))
  decode.success(Profile(id: id, display_name: display_name, metadata: metadata))
}

pub fn profile_to_json(input: Profile) -> json.Json {
  json.object(
    [
      #("id", json.string(input.id)),
      #("displayName", json.nullable(input.display_name, json.string)),
      #("metadata", json.nullable(input.metadata, json.string)),
    ],
  )
}

pub type GetProfileResponse {
  GetProfileResponse(profile: Option(Profile))
}

pub fn get_profile_response_decoder() -> decode.Decoder(GetProfileResponse) {
  use profile <- decode.field("profile", decode.optional(profile_decoder()))
  decode.success(GetProfileResponse(profile: profile))
}

pub fn get_profile_response_to_json(input: GetProfileResponse) -> json.Json {
  json.object([#("profile", json.nullable(input.profile, profile_to_json))])
}

pub fn get_profile(client: squall.Client) {
  squall.execute_query(
    client,
    "query GetProfile { profile { id displayName metadata } }",
    json.object([]),
    get_profile_response_decoder(),
  )
}

