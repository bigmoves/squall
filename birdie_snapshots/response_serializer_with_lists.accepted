---
version: 1.4.1
title: Response serializer with lists
file: ./test/codegen_test.gleam
test_name: generate_response_serializer_with_lists_test
---
import gleam/dynamic/decode
import gleam/json
import squall
import gleam/option.{type Option}

pub type User {
  User(id: String, name: String)
}

pub fn user_decoder() -> decode.Decoder(User) {
  use id <- decode.field("id", decode.string)
  use name <- decode.field("name", decode.string)
  decode.success(User(id: id, name: name))
}

pub fn user_to_json(input: User) -> json.Json {
  json.object(
    [
      #("id", json.string(input.id)),
      #("name", json.string(input.name)),
    ],
  )
}

pub type GetUsersResponse {
  GetUsersResponse(users: Option(List(User)))
}

pub fn get_users_response_decoder() -> decode.Decoder(GetUsersResponse) {
  use users <- decode.field("users", decode.optional(decode.list(user_decoder())))
  decode.success(GetUsersResponse(users: users))
}

pub fn get_users_response_to_json(input: GetUsersResponse) -> json.Json {
  json.object(
    [
      #("users", json.nullable(
        input.users,
        fn(list) { json.array(from: list, of: user_to_json) },
      )),
    ],
  )
}

pub fn get_users(client: squall.Client) {
  squall.execute_query(
    client,
    "query GetUsers { users { id name } }",
    json.object([]),
    get_users_response_decoder(),
  )
}

