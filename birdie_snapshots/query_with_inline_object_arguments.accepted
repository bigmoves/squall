---
version: 1.4.1
title: Query with inline object arguments
file: ./test/codegen_test.gleam
test_name: generate_inline_object_arguments_test
---
import gleam/dynamic/decode
import gleam/json
import squall
import gleam/option.{type Option}

pub type CharactersResult {
  CharactersResult(results: Option(List(Character)))
}

pub fn characters_result_decoder() -> decode.Decoder(CharactersResult) {
  use results <- decode.field("results", decode.optional(decode.list(character_decoder())))
  decode.success(CharactersResult(results: results))
}

pub type Character {
  Character(id: String, name: String)
}

pub fn character_decoder() -> decode.Decoder(Character) {
  use id <- decode.field("id", decode.string)
  use name <- decode.field("name", decode.string)
  decode.success(Character(id: id, name: name))
}

pub fn characters_result_to_json(input: CharactersResult) -> json.Json {
  json.object(
    [
      #("results", json.nullable(
        input.results,
        fn(list) { json.array(from: list, of: character_to_json) },
      )),
    ],
  )
}

pub fn character_to_json(input: Character) -> json.Json {
  json.object(
    [
      #("id", json.string(input.id)),
      #("name", json.string(input.name)),
    ],
  )
}

pub type GetCharactersResponse {
  GetCharactersResponse(characters: Option(CharactersResult))
}

pub fn get_characters_response_decoder() -> decode.Decoder(GetCharactersResponse) {
  use characters <- decode.field("characters", decode.optional(characters_result_decoder()))
  decode.success(GetCharactersResponse(characters: characters))
}

pub fn get_characters_response_to_json(input: GetCharactersResponse) -> json.Json {
  json.object(
    [
      #("characters", json.nullable(input.characters, characters_result_to_json)),
    ],
  )
}

pub fn get_characters(client: squall.Client) {
  squall.execute_query(
    client,
    "query GetCharacters { characters(filter: { name: \"rick\", status: \"alive\" }) { results { id name } } }",
    json.object([]),
    get_characters_response_decoder(),
  )
}

