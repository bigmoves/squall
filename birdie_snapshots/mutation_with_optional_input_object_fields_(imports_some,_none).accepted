---
version: 1.4.1
title: Mutation with optional InputObject fields (imports Some, None)
file: ./test/codegen_test.gleam
test_name: generate_mutation_with_optional_input_fields_test
---
import gleam/dynamic/decode
import gleam/json
import squall
import gleam/option.{type Option, Some, None}

pub type ProfileInput {
  ProfileInput(
    display_name: Option(String),
    description: Option(String),
    avatar: Option(json.Json),
  )
}

fn profile_input_to_json(input: ProfileInput) -> json.Json {
  [{
      case input.display_name {
        Some(val) -> Some(#("displayName", json.string(val)))
        None -> None
      }
    }, {
      case input.description {
        Some(val) -> Some(#("description", json.string(val)))
        None -> None
      }
    }, {
      case input.avatar {
        Some(val) -> Some(#("avatar", val))
        None -> None
      }
    }]
  |> list.filter_map(fn(x) {
    case x {
      Some(val) -> Ok(val)
      None -> Error(Nil)
    }
  })
  |> json.object
}

pub type Profile {
  Profile(id: String, display_name: Option(String), description: Option(String))
}

pub fn profile_decoder() -> decode.Decoder(Profile) {
  use id <- decode.field("id", decode.string)
  use display_name <- decode.field("displayName", decode.optional(decode.string))
  use description <- decode.field("description", decode.optional(decode.string))
  decode.success(Profile(
    id: id,
    display_name: display_name,
    description: description,
  ))
}

pub fn profile_to_json(input: Profile) -> json.Json {
  json.object(
    [
      #("id", json.string(input.id)),
      #("displayName", json.nullable(input.display_name, json.string)),
      #("description", json.nullable(input.description, json.string)),
    ],
  )
}

pub type CreateProfileResponse {
  CreateProfileResponse(create_profile: Option(Profile))
}

pub fn create_profile_response_decoder() -> decode.Decoder(CreateProfileResponse) {
  use create_profile <- decode.field("createProfile", decode.optional(profile_decoder()))
  decode.success(CreateProfileResponse(create_profile: create_profile))
}

pub fn create_profile_response_to_json(input: CreateProfileResponse) -> json.Json {
  json.object(
    [
      #("createProfile", json.nullable(input.create_profile, profile_to_json)),
    ],
  )
}

pub fn create_profile(client: squall.Client, input: ProfileInput) {
  squall.execute_query(
    client,
    "mutation CreateProfile($input: ProfileInput!) { createProfile(input: $input) { id displayName description } }",
    json.object([#("input", profile_input_to_json(input))]),
    create_profile_response_decoder(),
  )
}

