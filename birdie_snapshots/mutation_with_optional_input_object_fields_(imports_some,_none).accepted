---
version: 1.4.1
title: Mutation with optional InputObject fields (imports Some, None)
---
import gleam/dynamic/decode
import gleam/http
import gleam/http/request
import gleam/httpc
import gleam/json
import gleam/list
import gleam/result
import squall
import gleam/option.{type Option, Some, None}

pub type ProfileInput {
  ProfileInput(
    display_name: Option(String),
    description: Option(String),
    avatar: Option(json.Json),
  )
}

fn profile_input_to_json(input: ProfileInput) -> json.Json {
  [{
      case input.display_name {
        Some(val) -> Some(#("displayName", json.string(val)))
        None -> None
      }
    }, {
      case input.description {
        Some(val) -> Some(#("description", json.string(val)))
        None -> None
      }
    }, {
      case input.avatar {
        Some(val) -> Some(#("avatar", val))
        None -> None
      }
    }]
  |> list.filter_map(fn(x) {
    case x {
      Some(val) -> Ok(val)
      None -> Error(Nil)
    }
  })
  |> json.object
}

pub type Profile {
  Profile(id: String, display_name: Option(String), description: Option(String))
}

pub fn profile_decoder() -> decode.Decoder(Profile) {
  use id <- decode.field("id", decode.string)
  use display_name <- decode.field("displayName", decode.optional(decode.string))
  use description <- decode.field("description", decode.optional(decode.string))
  decode.success(Profile(
    id: id,
    display_name: display_name,
    description: description,
  ))
}

pub fn profile_to_json(input: Profile) -> json.Json {
  json.object(
    [
      #("id", json.string(input.id)),
      #("displayName", json.nullable(input.display_name, json.string)),
      #("description", json.nullable(input.description, json.string)),
    ],
  )
}

pub type CreateProfileResponse {
  CreateProfileResponse(create_profile: Option(Profile))
}

pub fn create_profile_response_decoder() -> decode.Decoder(CreateProfileResponse) {
  use create_profile <- decode.field("createProfile", decode.optional(profile_decoder()))
  decode.success(CreateProfileResponse(create_profile: create_profile))
}

pub fn create_profile_response_to_json(input: CreateProfileResponse) -> json.Json {
  json.object(
    [
      #("createProfile", json.nullable(input.create_profile, profile_to_json)),
    ],
  )
}

pub fn create_profile(client: squall.Client, input: ProfileInput) -> Result(CreateProfileResponse, String) {
  let query =
    "mutation CreateProfile($input: ProfileInput!) { createProfile(input: $input) { id displayName description } }"
  let variables =
    json.object([#("input", profile_input_to_json(input))])
  let body =
    json.object([#("query", json.string(query)), #("variables", variables)])
  use req <- result.try(
    request.to(client.endpoint)
    |> result.map_error(fn(_) { "Invalid endpoint URL" }),
  )
  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.to_string(body))
    |> request.set_header("content-type", "application/json")
  let req =
    list.fold(client.headers, req, fn(r, header) {
      request.set_header(r, header.0, header.1)
    })
  use resp <- result.try(
    httpc.send(req)
    |> result.map_error(fn(_) { "HTTP request failed" }),
  )
  use json_value <- result.try(
    json.parse(from: resp.body, using: decode.dynamic)
    |> result.map_error(fn(_) { "Failed to decode JSON response" }),
  )
  let data_and_response_decoder = {
    use data <- decode.field("data", create_profile_response_decoder())
    decode.success(data)
  }
  decode.run(json_value, data_and_response_decoder)
  |> result.map_error(fn(_) { "Failed to decode response data" })
}

