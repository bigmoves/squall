---
version: 1.4.1
title: Response serializer with all scalar types
file: ./test/codegen_test.gleam
test_name: generate_response_serializer_with_all_scalars_test
---
import gleam/dynamic/decode
import gleam/json
import squall
import gleam/option.{type Option}
import gleam/dynamic.{type Dynamic}

pub type Product {
  Product(
    id: String,
    name: String,
    price: Float,
    in_stock: Bool,
    rating: Int,
    metadata: Option(Dynamic),
  )
}

pub fn product_decoder() -> decode.Decoder(Product) {
  use id <- decode.field("id", decode.string)
  use name <- decode.field("name", decode.string)
  use price <- decode.field("price", decode.float)
  use in_stock <- decode.field("inStock", decode.bool)
  use rating <- decode.field("rating", decode.int)
  use metadata <- decode.field("metadata", decode.optional(decode.dynamic))
  decode.success(Product(
    id: id,
    name: name,
    price: price,
    in_stock: in_stock,
    rating: rating,
    metadata: metadata,
  ))
}

pub fn product_to_json(input: Product) -> json.Json {
  json.object(
    [
      #("id", json.string(input.id)),
      #("name", json.string(input.name)),
      #("price", json.float(input.price)),
      #("inStock", json.bool(input.in_stock)),
      #("rating", json.int(input.rating)),
      #("metadata", json.nullable(input.metadata, json.string)),
    ],
  )
}

pub type GetProductResponse {
  GetProductResponse(product: Option(Product))
}

pub fn get_product_response_decoder() -> decode.Decoder(GetProductResponse) {
  use product <- decode.field("product", decode.optional(product_decoder()))
  decode.success(GetProductResponse(product: product))
}

pub fn get_product_response_to_json(input: GetProductResponse) -> json.Json {
  json.object([#("product", json.nullable(input.product, product_to_json))])
}

pub fn get_product(client: squall.Client) {
  squall.execute_query(
    client,
    "query GetProduct { product { id name price inStock rating metadata } }",
    json.object([]),
    get_product_response_decoder(),
  )
}

