---
version: 1.4.1
title: Mutation with JSON scalar in InputObject
file: ./test/codegen_test.gleam
test_name: generate_mutation_with_json_input_field_test
---
import gleam/dynamic/decode
import gleam/http
import gleam/http/request
import gleam/httpc
import gleam/json
import gleam/list
import gleam/result
import squall
import gleam/option.{type Option, Some, None}
import gleam/dynamic.{type Dynamic}

pub type SettingsInput {
  SettingsInput(metadata: Option(json.Json), display_name: Option(String))
}

fn settings_input_to_json(input: SettingsInput) -> json.Json {
  [{
      case input.metadata {
        Some(val) -> Some(#("metadata", val))
        None -> None
      }
    }, {
      case input.display_name {
        Some(val) -> Some(#("displayName", json.string(val)))
        None -> None
      }
    }]
  |> list.filter_map(fn(x) {
    case x {
      Some(val) -> Ok(val)
      None -> Error(Nil)
    }
  })
  |> json.object
}

pub type Settings {
  Settings(id: String, metadata: Option(Dynamic))
}

pub fn settings_decoder() -> decode.Decoder(Settings) {
  use id <- decode.field("id", decode.string)
  use metadata <- decode.field("metadata", decode.optional(decode.dynamic))
  decode.success(Settings(id: id, metadata: metadata))
}

pub type UpdateSettingsResponse {
  UpdateSettingsResponse(update_settings: Option(Settings))
}

pub fn update_settings_response_decoder() -> decode.Decoder(UpdateSettingsResponse) {
  use update_settings <- decode.field("updateSettings", decode.optional(settings_decoder()))
  decode.success(UpdateSettingsResponse(update_settings: update_settings))
}

pub fn update_settings(client: squall.Client, input: SettingsInput) -> Result(UpdateSettingsResponse, String) {
  let query =
    "mutation UpdateSettings($input: SettingsInput!) { updateSettings(input: $input) { id metadata } }"
  let variables =
    json.object([#("input", settings_input_to_json(input))])
  let body =
    json.object([#("query", json.string(query)), #("variables", variables)])
  use req <- result.try(
    request.to(client.endpoint)
    |> result.map_error(fn(_) { "Invalid endpoint URL" }),
  )
  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.to_string(body))
    |> request.set_header("content-type", "application/json")
  let req =
    list.fold(client.headers, req, fn(r, header) {
      request.set_header(r, header.0, header.1)
    })
  use resp <- result.try(
    httpc.send(req)
    |> result.map_error(fn(_) { "HTTP request failed" }),
  )
  use json_value <- result.try(
    json.parse(from: resp.body, using: decode.dynamic)
    |> result.map_error(fn(_) { "Failed to decode JSON response" }),
  )
  let data_and_response_decoder = {
    use data <- decode.field("data", update_settings_response_decoder())
    decode.success(data)
  }
  decode.run(json_value, data_and_response_decoder)
  |> result.map_error(fn(_) { "Failed to decode response data" })
}

