---
version: 1.4.1
title: Mutation with JSON scalar in InputObject
file: ./test/codegen_test.gleam
test_name: generate_mutation_with_json_input_field_test
---
import gleam/dynamic/decode
import gleam/json
import squall
import gleam/option.{type Option, Some, None}
import gleam/dynamic.{type Dynamic}

pub type SettingsInput {
  SettingsInput(metadata: Option(json.Json), display_name: Option(String))
}

fn settings_input_to_json(input: SettingsInput) -> json.Json {
  [{
      case input.metadata {
        Some(val) -> Some(#("metadata", val))
        None -> None
      }
    }, {
      case input.display_name {
        Some(val) -> Some(#("displayName", json.string(val)))
        None -> None
      }
    }]
  |> list.filter_map(fn(x) {
    case x {
      Some(val) -> Ok(val)
      None -> Error(Nil)
    }
  })
  |> json.object
}

pub type Settings {
  Settings(id: String, metadata: Option(Dynamic))
}

pub fn settings_decoder() -> decode.Decoder(Settings) {
  use id <- decode.field("id", decode.string)
  use metadata <- decode.field("metadata", decode.optional(decode.dynamic))
  decode.success(Settings(id: id, metadata: metadata))
}

pub fn settings_to_json(input: Settings) -> json.Json {
  json.object(
    [
      #("id", json.string(input.id)),
      #("metadata", json.nullable(input.metadata, json.string)),
    ],
  )
}

pub type UpdateSettingsResponse {
  UpdateSettingsResponse(update_settings: Option(Settings))
}

pub fn update_settings_response_decoder() -> decode.Decoder(UpdateSettingsResponse) {
  use update_settings <- decode.field("updateSettings", decode.optional(settings_decoder()))
  decode.success(UpdateSettingsResponse(update_settings: update_settings))
}

pub fn update_settings_response_to_json(input: UpdateSettingsResponse) -> json.Json {
  json.object(
    [
      #("updateSettings", json.nullable(input.update_settings, settings_to_json)),
    ],
  )
}

pub fn update_settings(client: squall.Client, input: SettingsInput) {
  squall.execute_query(
    client,
    "mutation UpdateSettings($input: SettingsInput!) { updateSettings(input: $input) { id metadata } }",
    json.object([#("input", settings_input_to_json(input))]),
    update_settings_response_decoder(),
  )
}

