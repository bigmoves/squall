---
version: 1.4.1
title: Mutation function generation
---
import gleam/dynamic/decode
import gleam/http
import gleam/http/request
import gleam/httpc
import gleam/json
import gleam/list
import gleam/result
import squall
import gleam/option.{type Option}

pub type User {
  User(id: String, name: String)
}

pub fn user_decoder() -> decode.Decoder(User) {
  use id <- decode.field("id", decode.string)
  use name <- decode.field("name", decode.string)
  decode.success(User(id: id, name: name))
}

pub fn user_to_json(input: User) -> json.Json {
  json.object(
    [
      #("id", json.string(input.id)),
      #("name", json.string(input.name)),
    ],
  )
}

pub type CreateUserResponse {
  CreateUserResponse(create_user: Option(User))
}

pub fn create_user_response_decoder() -> decode.Decoder(CreateUserResponse) {
  use create_user <- decode.field("createUser", decode.optional(user_decoder()))
  decode.success(CreateUserResponse(create_user: create_user))
}

pub fn create_user_response_to_json(input: CreateUserResponse) -> json.Json {
  json.object([#("createUser", json.nullable(input.create_user, user_to_json))])
}

pub fn create_user(client: squall.Client, name: String) -> Result(CreateUserResponse, String) {
  let query =
    "mutation CreateUser($name: String!) { createUser(name: $name) { id name } }"
  let variables =
    json.object([#("name", json.string(name))])
  let body =
    json.object([#("query", json.string(query)), #("variables", variables)])
  use req <- result.try(
    request.to(client.endpoint)
    |> result.map_error(fn(_) { "Invalid endpoint URL" }),
  )
  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.to_string(body))
    |> request.set_header("content-type", "application/json")
  let req =
    list.fold(client.headers, req, fn(r, header) {
      request.set_header(r, header.0, header.1)
    })
  use resp <- result.try(
    httpc.send(req)
    |> result.map_error(fn(_) { "HTTP request failed" }),
  )
  use json_value <- result.try(
    json.parse(from: resp.body, using: decode.dynamic)
    |> result.map_error(fn(_) { "Failed to decode JSON response" }),
  )
  let data_and_response_decoder = {
    use data <- decode.field("data", create_user_response_decoder())
    decode.success(data)
  }
  decode.run(json_value, data_and_response_decoder)
  |> result.map_error(fn(_) { "Failed to decode response data" })
}

